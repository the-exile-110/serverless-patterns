AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  waf-ip-whitelist-manager

  Sample SAM Template for waf-ip-whitelist-manager

Globals:
  Function:
    Timeout: 30

Mappings:
  Constant:
    ResourceId:
      VpcId: vpc-a23cdbc4
      SubnetId: subnet-f4a803df

Resources:
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaFunctionRole.Arn
      Architectures:
        - x86_64
      Policies:
        - AWSWAFFullAccess
        - AWSLambdaExecute
      Events:
        APIRoot:
          Type: Api # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref PrivateApiApiGateway
        API:
          Type: Api # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref PrivateApiApiGateway

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: !Sub ${AWS::StackName}-lambda-function-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Api Gateway Lambda Permission
  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PrivateApiApiGateway}/*'

  # API Gateway
  PrivateApiApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: private-api
      StageName: Prod
      MethodSettings:
        # Enable CloudWatch logging for all API methods
        - DataTraceEnabled: true
          LoggingLevel: 'INFO'
          ResourcePath: '/*'
          HttpMethod: '*'
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - !Ref PrivateApiVpcEndpoint
      DefinitionBody:
        openapi: 3.0.3
        info:
          title: private-api
          description: private-api
        schemes:
          - https
        consumes:
          - application/json
        produces:
          - application/json
        paths:
          /:
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              parameters:
                - name: proxy
                  in: path
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy
        x-amazon-apigateway-binary-media-types:
          - '*/*'
        # VPC Endpoint access policy
        x-amazon-apigateway-policy:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: 'execute-api:Invoke'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*'
              Condition:
                StringEquals:
                  aws:SourceVpce: !Ref PrivateApiVpcEndpoint

  # API Gateway CloudWatch Role
  ApiGatewayCloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  # API Gateway CloudWatch Role
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  # VPC Endpoint
  PrivateApiVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api
      SubnetIds:
        - !FindInMap [Constant, ResourceId, SubnetId]
      VpcId: !FindInMap [Constant, ResourceId, VpcId]
      VpcEndpointType: Interface
      SecurityGroupIds:
        - !GetAtt PrivateApiSg.GroupId
      PrivateDnsEnabled: true


  # VPC Endpoint Security Group
  PrivateApiSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: PrivateApiSg
      GroupName: PrivateApiSg
      VpcId: !FindInMap [Constant, ResourceId, VpcId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

Outputs:
  LambdaFunctionPrivateApi:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${PrivateApiApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  LambdaFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt LambdaFunction.Arn

  LambdaFunctionIamRole:
    Description: "Implicit IAM Role created for lambda function"
    Value: !GetAtt LambdaFunction.Arn
